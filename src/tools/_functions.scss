/* Functions */
@use "sass:string";

@function em($px, $base: 16px) {
	@return ($px / $base) * 1em;
}
/// Replace `$search` with `$replace` in `$string`
/// @author Kitty Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace +
			str-replace(
				str-slice($string, $index + str-length($search)),
				$search,
				$replace
			);
	}

	@return $string;
}

/// Convert name to a valid CSS class name
/// @param {String} $name - The original name
/// @return {String} - Valid CSS class name
@function to-valid-class-name($name) {
	// Replace spaces, special characters, and parentheses with hyphens
	$name: str-replace($name, "/", "-");
	$name: str-replace($name, "_", "-");
	$name: str-replace($name, "(", "-");
	$name: str-replace($name, ")", "-");
	$name: str-replace($name, " ", "-");

	// Convert to lowercase
	$name: string.to-lower-case($name);

	@return $name;
}

// Helper function to convert string to lowercase
@function to-lower-case($string) {
	@return unquote(str-slice(inspect($string), 2, -2));
}

// Function to replace "." with "-"
@function sanitize-key($key) {
	@return str-replace(transform-number-to-string($key), ".", "-");
}

@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace +
			str-replace(
				str-slice($string, $index + str-length($search)),
				$search,
				$replace
			);
	}

	@return $string;
}
@function transform-number-to-string($value) {
	@if type-of($value) == "number" {
		@return #{$value};
	} @else if type-of($value) == "string" {
		@return $value;
	} @else {
		@error 'Input #{$value} is no number or string';
	}
}
